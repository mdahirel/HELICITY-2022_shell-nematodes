---
title: "analysis"
author: "Maxime Dahirel"
format: html
editor_options: 
  chunk_output_type: console
---


```{r packages}
library(sf)
library(DHARMa)
library(car)
library(emmeans)
library(ncf)  # for spline correlograms
library(MuMIn)


library(tidyverse)

library(here)
```

 

```{r}
nematodes <- read_csv(here("data","HELICITY22_nematodes.csv"))

points <- st_read(here("data","HELICITY22_sites_BELambert72_wGHSL.gpkg")) |> 
  mutate(x=st_coordinates(geom)[,1],
         y=st_coordinates(geom)[,2]) |> 
  mutate(
    SMOD_type =  case_when(SMOD ==30 ~ "3 - Urban Cluster",
                      (SMOD >= 20 & SMOD < 30) ~ "2 - Intermediate",
                      (SMOD > 10 & SMOD < 20) ~ "1 - Rural",
                      SMOD == 10 ~ "0 - Water bodies",
                      T ~ NA_character_)
  )
```

```{r}
data <- nematodes |> 
  mutate(has.nematodes = Nematodes>0) |> 
  group_by(Population) |>
  summarise(
    N_nema = sum(has.nematodes, na.rm=TRUE),
    N = sum(!is.na(has.nematodes))
  ) |> 
  left_join(points) |> 
  st_as_sf()
```


```{r}
## misc numbers for methods
dim(points)[1] # number of sites visited
dim(nematodes)[1] # number of snails
length(unique(nematodes$Population)) # number of sites with snails
sum(data$N) #number of snails scanned for nematodes (i.e. excluding missing snails)
dim(data)[1] # number of sites with snails, after accounting for lost snails

table(points$City)  # spread of visited sites between cities
table(data$City)    # spread of sites with Cepaea between cities

sum(data$N_nema)    # number of snails with nematodes
sum(nematodes$Nematodes,na.rm=TRUE)  # number of nematodes found across all shells

mean(points$N_collectors) ## mean number of collectors per site
range(points$N_collectors)
mean(points$Sampling_effort_minutes)  # effort in person-minutes
range(points$Sampling_effort_minutes)

nearest <- st_nearest_feature(points)
nearest_dist <- st_distance(points, points[nearest,], by_element=TRUE)

range(nearest_dist)
mean(nearest_dist)

nearest <- st_nearest_feature(data)
nearest_dist <- st_distance(data, data[nearest,], by_element=TRUE)

range(nearest_dist)
mean(nearest_dist)
```

```{r}
mod_built100 <- glm(cbind(N_nema,N-N_nema)~scale(BUILT100),data=data,family=binomial)
mod_built1000 <- glm(cbind(N_nema,N-N_nema)~scale(BUILT1000),data=data,family=binomial)
mod_pop100 <- glm(cbind(N_nema,N-N_nema)~scale(POP100),data=data,family=binomial)
mod_pop1000 <- glm(cbind(N_nema,N-N_nema)~scale(POP1000),data=data,family=binomial)

mod_SMOD <- glm(cbind(N_nema,N-N_nema)~SMOD_type,data=data,family=binomial)
```

# model comparison and check
```{r}
model.sel(mod_built100,mod_built1000,mod_pop100,mod_pop1000,mod_SMOD,rank="AICc")

plot(simulateResiduals(mod_SMOD))
outliers(simulateResiduals(mod_SMOD))

mod_rerun <- glm(cbind(N_nema,N-N_nema)~SMOD_type,
                 data=data[-c(outliers(simulateResiduals(mod_SMOD))),],
                 family=binomial)
```

# test for residual spatial autocorrelation

```{r}
correlog <- spline.correlog (x = data$x/1000, y = data$y/1000,
                             z = residuals(mod_SMOD, type = "pearson"))

plot(correlog) # no evidence of residual autocorrelation
```


# model exploration
```{r}
Anova(mod_SMOD)

contrast(emmeans(mod_SMOD,specs = ~ SMOD_type),method="pairwise")

preds <- emmeans(mod_SMOD,specs = ~ SMOD_type, type="response") |> 
  as_tibble()
```




# plot

```{r}
ggplot(data) + 
  geom_point(aes(SMOD_type,N_nema/N,size=N),position = position_jitter(width=0.3),col="darkgrey") + 
  geom_pointrange(data = preds, aes(x=SMOD_type,y=prob,ymin=asymp.LCL,ymax=asymp.UCL),size=1,pch=21,fill="white") 
  scale_size_area("Number of snails") + 
  labs(x="Urbanisation type (SMOD, 1km grid)", y = "Proportion of shells with nematodes")+
  theme_bw()
```

# cross validating - ish

```{r}
mod_SMOD_noLeuven <- glm(cbind(N_nema,N-N_nema)~SMOD_type,
                 data=filter(data,City!="Leuven"),
                 family=binomial)

mod_SMOD_noGhent <- glm(cbind(N_nema,N-N_nema)~SMOD_type,
                 data=filter(data,City!="Ghent"),
                 family=binomial)

mod_SMOD_noBrussels <- glm(cbind(N_nema,N-N_nema)~SMOD_type,
                 data=filter(data,City!="Brussels"),
                 family=binomial)

preds_full <- emmeans(mod_SMOD,specs = ~ SMOD_type, type="response") |> 
  as_tibble() |> 
  mutate(dataset = "full dataset")

preds_noLeuven <- emmeans(mod_SMOD_noLeuven,specs = ~ SMOD_type, type="response") |> 
  as_tibble() |> 
  mutate(dataset = "minus Leuven")

preds_noGhent <- emmeans(mod_SMOD_noGhent,specs = ~ SMOD_type, type="response") |> 
  as_tibble() |> 
  mutate(dataset = "minus Ghent")

preds_noBrussels <- emmeans(mod_SMOD_noBrussels,specs = ~ SMOD_type, type="response") |> 
  as_tibble() |> 
  mutate(dataset = "minus Brussels")

rbind(preds_full,preds_noLeuven,preds_noGhent,preds_noBrussels) |> 
ggplot() + 
  geom_pointrange(aes(x=SMOD_type,y=prob,ymin=asymp.LCL,ymax=asymp.UCL,fill=dataset),size=1,pch=21,position=position_dodge(width=0.5))+
  labs(x="Urbanisation type (SMOD, 1km grid)", y = "Proportion of shells with nematodes (model prediction and CI95%)")+
  theme_bw()

```

# intensity (ish, number of nematodes in shells containing nematodes)

```{r}
library(lme4)
library(glmmTMB)

infected <- nematodes |> 
  filter(Nematodes > 0) |> 
  left_join(points) |> 
  mutate(Nematodes_minus_1 = Nematodes - 1)  # so the test variable stays bounded at 0

mod=glmer(Nematodes_minus_1 ~ SMOD_type + (1|Population),data=infected, family=poisson)
# convergence issue, let's use glmmTMB
mod=glmmTMB(Nematodes_minus_1 ~ SMOD_type + (1|Population),data=infected, family=poisson)
plot(simulateResiduals(mod))
Anova(mod)


preds_infected <- emmeans(mod,specs = ~ SMOD_type, type="response") |> 
  as_tibble()

ggplot(infected) + 
  geom_point(aes(SMOD_type,Nematodes),position = position_jitter(width=0.3),col="darkgrey") + 
  geom_pointrange(data = preds_infected, aes(x=SMOD_type,y=rate + 1,ymin=asymp.LCL + 1,ymax=asymp.UCL + 1),size=1,pch=21,fill="white") +
  labs(x="Urbanisation type (SMOD, 1km grid)", y = "Number of nematodes per shell containing nematodes")+
  scale_y_log10()+
  theme_bw()
```

